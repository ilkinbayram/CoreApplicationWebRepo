// <auto-generated />
using System;
using DataAccess.Concrete.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace TouchApp.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210922100316_CreateDbMigration")]
    partial class CreateDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.AnswerVariation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DefinitionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionResultId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionResultId");

                    b.ToTable("AnswerVariations");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Blog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BlogCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("CaptionSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentHtmlRawKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OverviewHtmlRawKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerProfessionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewDescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ScreenType")
                        .HasColumnType("tinyint");

                    b.Property<string>("SubtitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogCategoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Blogs");
                });

            modelBuilder.Entity("Core.Entities.Concrete.BlogCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DescKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("BlogCategories");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentHtmlRawKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<byte>("MaxTotalMonths")
                        .HasColumnType("tinyint");

                    b.Property<byte>("MinTotalMonths")
                        .HasColumnType("tinyint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OverViewHtmlRawKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PricePerMonth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProfessionCourseCategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ScheduleHtmlRawKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("TotalHours")
                        .HasColumnType("smallint");

                    b.Property<string>("UniqueToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ProfessionCourseCategoryId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Core.Entities.Concrete.CourseComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerEmail")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseComments");
                });

            modelBuilder.Entity("Core.Entities.Concrete.CourseService", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CourseServices");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Exam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AverageResulPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ExamDateTime")
                        .HasColumnType("datetime2");

                    b.Property<byte>("ExamPeriodMinute")
                        .HasColumnType("tinyint");

                    b.Property<string>("ExamTitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("StudyingGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudyingGroupId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ExamQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ExamQuestions");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FlagIconSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("Language_oid")
                        .HasColumnType("smallint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameAbr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Localization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<short>("Lang_oid")
                        .HasColumnType("smallint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<short>("Project_oid")
                        .HasColumnType("smallint");

                    b.Property<string>("Translate")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Key", "Translate")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL AND [Translate] IS NOT NULL");

                    b.ToTable("Localizations");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Media", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AltrKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<byte>("MediaType")
                        .HasColumnType("tinyint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniqueParentToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Medias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("MessageCode")
                        .HasColumnType("bigint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Phrase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CaptionSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContentKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OwnerName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerSurname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Phrases");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ProfessionCourseCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IconSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ParentCategoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("ProfessionCourseCategories");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("DifficultyDegree")
                        .HasColumnType("tinyint");

                    b.Property<byte>("EvaluationPoint")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("QuestionTextKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("QuestionType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Core.Entities.Concrete.QuestionResultExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ResultExamId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("ResultExamId");

                    b.ToTable("QuestionResultExams");
                });

            modelBuilder.Entity("Core.Entities.Concrete.QuestionVariation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DefinitionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsTrue")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("OptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint");

                    b.Property<string>("VariationToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionVariations");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ResultExam", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("ExamId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsJoined")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte>("NoAnswerCount")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RightAnswerCount")
                        .HasColumnType("tinyint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TotalPoint")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalRightPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<byte>("WrongAnswerCount")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("ExamId");

                    b.HasIndex("StudentId");

                    b.ToTable("ResultExams");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SharingType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameKey")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SharingTypes");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SharingTypeMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<long>("MediaId")
                        .HasColumnType("bigint");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("SharingTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MediaId");

                    b.HasIndex("SharingTypeId");

                    b.ToTable("SharingTypeMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Slider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderMediaSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubTitleKey")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("TitleKey")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IconSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NameSocial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Uri")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Student", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityToken")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudentOperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OperationClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudentStudyingGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("StudentId")
                        .HasColumnType("bigint");

                    b.Property<long>("StudyingGroupId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("StudyingGroupId");

                    b.ToTable("StudentStudyingGroups");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudyingGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("StudyingGroups");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("TagType")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TagBlog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BlogId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BlogId");

                    b.HasIndex("TagId");

                    b.ToTable("TagBlogs");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Teacher", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BiographyKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<string>("CaptionSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyNameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("JobDescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewMoviePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte>("ProfessionDegree")
                        .HasColumnType("tinyint");

                    b.Property<string>("ProfessionDescriptionKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfessionNameKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartProfessionCareer")
                        .HasColumnType("datetime2");

                    b.Property<string>("WallpaperPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherCourse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherCourses");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherOperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OperationClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherSocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SocialMediaId")
                        .HasColumnType("bigint");

                    b.Property<long>("TeacherId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherSocialMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("AccountType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<byte>("Gender")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)3);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varbinary(1000)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("varbinary(1000)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PhoneNumberPrefix")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("ProfilePhotoPath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityToken")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("WallpaperPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Created_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .HasColumnType("datetime2");

                    b.Property<string>("Modified_by")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("OperationClaimId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("OperationClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserSocialMedia", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("Created_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Created_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<short>("ModelType")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("Modified_at")
                        .IsRequired()
                        .HasColumnType("smalldatetime");

                    b.Property<string>("Modified_by")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SocialMediaId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SocialMediaId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSocialMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AnswerVariation", b =>
                {
                    b.HasOne("Core.Entities.Concrete.QuestionResultExam", "QuestionResult")
                        .WithMany("AnswerVariations")
                        .HasForeignKey("QuestionResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionResult");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Blog", b =>
                {
                    b.HasOne("Core.Entities.Concrete.BlogCategory", "BlogCategory")
                        .WithMany("Blogs")
                        .HasForeignKey("BlogCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("Blogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogCategory");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Concrete.BlogCategory", b =>
                {
                    b.HasOne("Core.Entities.Concrete.BlogCategory", "ParentCategory")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Course", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Language", "Language")
                        .WithMany("Courses")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.ProfessionCourseCategory", "ProfessionCourseCategory")
                        .WithMany("Courses")
                        .HasForeignKey("ProfessionCourseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ProfessionCourseCategory");
                });

            modelBuilder.Entity("Core.Entities.Concrete.CourseComment", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Course", "Course")
                        .WithMany("CourseComments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Exam", b =>
                {
                    b.HasOne("Core.Entities.Concrete.StudyingGroup", "StudyingGroup")
                        .WithMany("Exams")
                        .HasForeignKey("StudyingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StudyingGroup");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ExamQuestion", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ProfessionCourseCategory", b =>
                {
                    b.HasOne("Core.Entities.Concrete.ProfessionCourseCategory", "ParentCategory")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Core.Entities.Concrete.QuestionResultExam", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Question", "Question")
                        .WithMany("QuestionResults")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.ResultExam", "ResultExam")
                        .WithMany("QuestionResults")
                        .HasForeignKey("ResultExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("ResultExam");
                });

            modelBuilder.Entity("Core.Entities.Concrete.QuestionVariation", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Question", "Question")
                        .WithMany("MultiDefinitionVariations")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ResultExam", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Exam", "Exam")
                        .WithMany("Results")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Student", "Student")
                        .WithMany("ResultExams")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Exam");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SharingTypeMedia", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Media", "Media")
                        .WithMany("SharingTypeMedias")
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.SharingType", "SharingType")
                        .WithMany("SharingTypeMedias")
                        .HasForeignKey("SharingTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Media");

                    b.Navigation("SharingType");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudentOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("StudentOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Student", "Student")
                        .WithMany("StudentOperationClaims")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudentStudyingGroup", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Student", "Student")
                        .WithMany("StudentStudyingGroups")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.StudyingGroup", "StudyingGroup")
                        .WithMany("StudentStudyingGroups")
                        .HasForeignKey("StudyingGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("StudyingGroup");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudyingGroup", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Course", "Course")
                        .WithMany("StudyingGroups")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TagBlog", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Blog", "Blog")
                        .WithMany("TagBlogs")
                        .HasForeignKey("BlogId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Tag", "Tag")
                        .WithMany("TagBlogs")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Blog");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherCourse", b =>
                {
                    b.HasOne("Core.Entities.Concrete.Course", "Course")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherCourses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("TeacherOperationClaims")
                        .HasForeignKey("OperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherOperationClaims")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Core.Entities.Concrete.TeacherSocialMedia", b =>
                {
                    b.HasOne("Core.Entities.Concrete.SocialMedia", "SocialMedia")
                        .WithMany("TeacherSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.Teacher", "Teacher")
                        .WithMany("TeacherSocialMedias")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.OperationClaim", "OperationClaim")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("OperationClaimId");

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("UserOperationClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OperationClaim");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Concrete.UserSocialMedia", b =>
                {
                    b.HasOne("Core.Entities.Concrete.SocialMedia", "SocialMedia")
                        .WithMany("UserSocialMedias")
                        .HasForeignKey("SocialMediaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.User", "User")
                        .WithMany("UserSocialMedias")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SocialMedia");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Blog", b =>
                {
                    b.Navigation("TagBlogs");
                });

            modelBuilder.Entity("Core.Entities.Concrete.BlogCategory", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Course", b =>
                {
                    b.Navigation("CourseComments");

                    b.Navigation("StudyingGroups");

                    b.Navigation("TeacherCourses");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Exam", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("Results");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Language", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Media", b =>
                {
                    b.Navigation("SharingTypeMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.OperationClaim", b =>
                {
                    b.Navigation("StudentOperationClaims");

                    b.Navigation("TeacherOperationClaims");

                    b.Navigation("UserOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ProfessionCourseCategory", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Courses");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Question", b =>
                {
                    b.Navigation("ExamQuestions");

                    b.Navigation("MultiDefinitionVariations");

                    b.Navigation("QuestionResults");
                });

            modelBuilder.Entity("Core.Entities.Concrete.QuestionResultExam", b =>
                {
                    b.Navigation("AnswerVariations");
                });

            modelBuilder.Entity("Core.Entities.Concrete.ResultExam", b =>
                {
                    b.Navigation("QuestionResults");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SharingType", b =>
                {
                    b.Navigation("SharingTypeMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.SocialMedia", b =>
                {
                    b.Navigation("TeacherSocialMedias");

                    b.Navigation("UserSocialMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Student", b =>
                {
                    b.Navigation("ResultExams");

                    b.Navigation("StudentOperationClaims");

                    b.Navigation("StudentStudyingGroups");
                });

            modelBuilder.Entity("Core.Entities.Concrete.StudyingGroup", b =>
                {
                    b.Navigation("Exams");

                    b.Navigation("StudentStudyingGroups");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Tag", b =>
                {
                    b.Navigation("TagBlogs");
                });

            modelBuilder.Entity("Core.Entities.Concrete.Teacher", b =>
                {
                    b.Navigation("TeacherCourses");

                    b.Navigation("TeacherOperationClaims");

                    b.Navigation("TeacherSocialMedias");
                });

            modelBuilder.Entity("Core.Entities.Concrete.User", b =>
                {
                    b.Navigation("Blogs");

                    b.Navigation("UserOperationClaims");

                    b.Navigation("UserSocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
